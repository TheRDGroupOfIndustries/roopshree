generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  USER
  ADMIN
  EXCLUSIVE_USER
  DELIVERY_BOY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  CONFIRMED
  DISPATCH
  OUTOFDELIVERY
  CANCELLED
  DELIVERED
}

enum ExpenseCategory {
  INVENTORY
  LOGISTICS
  MARKETING
  SALARY
  OTHER
}


model User {
  id                              String         @id @default(cuid())
  name                            String
  email                           String         @unique
  password                        String
  createdAt                       DateTime       @default(now())
  role                            Role           @default(USER)
  updatedAt                       DateTime       @updatedAt
  cart                            Cart?
  employees                       Employee[]
  Order_Order_deliveryBoyIdToUser Order[]        @relation("Order_deliveryBoyIdToUser")
  orders                          Order[]
  products                        Products[]     @relation("UserProducts")
  reviews                         Review[]
  stockHistory                    StockHistory[]
  Wishlist                        Wishlist[]
  expenses                        Expense[]
}

model Employee {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  hireDate    DateTime  @default(now())
  position    String
  salary      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id          String     @id @default(cuid())
  title       String
  description String
  images      String[]
  details     String?
  insideBox   String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userId      String
  cart        CartItem[]
  orders      Order[]
  user        User       @relation("UserProducts", fields: [userId], references: [id])
  reviews     Review[]
  stock       Stock?
  Wishlist    Wishlist[]
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId String
  color     String?
  size      String?
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                             String    @id @default(cuid())
  productId                      String
  userId                         String
  quantity                       Int
  totalAmount                    Float
  status                         Status    @default(CONFIRMED)
  address                        String
  paymentMode                    String    @default("COD")
  referralCode                   String?
  createdAt                      DateTime  @default(now())
  deliveryBoyId                  String?
  User_Order_deliveryBoyIdToUser User?     @relation("Order_deliveryBoyIdToUser", fields: [deliveryBoyId], references: [id])
  product                        Products  @relation(fields: [productId], references: [id])
  user                           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderOtp                       OrderOtp?
}

model Stock {
  id           String         @id @default(cuid())
  productId    String         @unique
  currentStock Int            @default(0)
  product      Products       @relation(fields: [productId], references: [id], onDelete: Cascade)
  history      StockHistory[]
}

model StockHistory {
  id           String   @id @default(cuid())
  fromQuantity Int
  toQuantity   Int
  createdAt    DateTime @default(now())
  updatedBy    String?
  stockId      String
  stock        Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [updatedBy], references: [id])
}

model OrderOtp {
  id        String   @id
  orderId   String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  createdBy String
  Order     Order    @relation(fields: [orderId], references: [id])
}

model Wishlist {
  id        String   @id
  userId    String
  productId String
  createdAt DateTime @default(now())
  Products  Products @relation(fields: [productId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Expense {
  id          String          @id @default(cuid())
  title       String
  description String?
  category    ExpenseCategory
  amount      Float
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String
  user        User            @relation(fields: [createdBy], references: [id])
}
