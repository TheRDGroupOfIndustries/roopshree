generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EXCLUSIVE_USER
  DELIVERY_BOY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  createdAt DateTime   @default(now())
  role      Role       @default(USER)
  updatedAt DateTime   @updatedAt
  Employee  Employee[]
  products  Products[] @relation("UserProducts")
  reviews   Review[]
  cart      Cart?
}

model Products {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  details     String?
  insideBox   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation("UserProducts", fields: [userId], references: [id])

  reviews Review[]
  cart    CartItem[]
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  items     CartItem[]
}

model CartItem {
  id        String    @id @default(cuid())
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  cartId    String
  productId String

  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
}


model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Employee {
  id          String    @id
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  hireDate    DateTime  @default(now())
  position    String
  salary      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  userId      String
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

