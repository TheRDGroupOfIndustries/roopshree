generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EXCLUSIVE_USER
  DELIVERY_BOY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  CONFIRMED
  DISPATCH
  OUTOFDELIVERY
  CANCELLED
  DELIVERED
}

enum ExpenseCategory {
  INVENTORY
  LOGISTICS
  MARKETING
  SALARY
  OTHER
}

model User {
  id                  String         @id @default(cuid())
  name                String
  email               String         @unique
  password            String
  createdAt           DateTime       @default(now())
  role                Role           @default(USER)
  updatedAt           DateTime       @updatedAt
  profileImage        String?
  cart                Cart?
  employees           Employee[]
  orders              Order[]        @relation("OrderUser")
  ordersAsDeliveryBoy Order[]        @relation("OrderDeliveryBoy")
  products            Products[]     @relation("UserProducts")
  wishlist            Wishlist[]
  stockHistory        StockHistory[]
  expenses            Expense[]
  reviews             Review[]       @relation("ReviewUser")
}

model Employee {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  hireDate    DateTime  @default(now())
  position    String
  salary      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  details     String?
  insideBox   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation("UserProducts", fields: [userId], references: [id])

  reviews  Review[]
  cart     CartItem[]
  orders   Order[]
  wishlist Wishlist[]
  stock    Stock?
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartId    String
  productId String
  color     String?
  size      String?
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String
  userId    String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation("ReviewUser", fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id            String   @id @default(cuid())
  productId     String
  userId        String
  quantity      Int
  totalAmount   Float
  status        Status   @default(CONFIRMED)
  address       String
  paymentMode   String   @default("COD")
  referralCode  String?
  createdAt     DateTime @default(now())
  deliveryBoyId String?

  product     Products @relation(fields: [productId], references: [id])
  user        User     @relation("OrderUser", fields: [userId], references: [id], onDelete: Cascade)
  deliveryBoy User?    @relation("OrderDeliveryBoy", fields: [deliveryBoyId], references: [id])

  orderOtp OrderOtp?
}

model Stock {
  id           String         @id @default(cuid())
  productId    String         @unique
  currentStock Int            @default(0)
  product      Products       @relation(fields: [productId], references: [id], onDelete: Cascade)
  history      StockHistory[]
}

model StockHistory {
  id           String   @id @default(cuid())
  fromQuantity Int
  toQuantity   Int
  createdAt    DateTime @default(now())
  updatedBy    String?
  stockId      String
  stock        Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  user         User?    @relation(fields: [updatedBy], references: [id])
}

model OrderOtp {
  id        String   @id @default(cuid())
  orderId   String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  createdBy String
  order     Order    @relation(fields: [orderId], references: [id])
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Products @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
}

model Expense {
  id          String          @id @default(cuid())
  title       String
  description String?
  category    ExpenseCategory
  amount      Float
  date        DateTime        @default(now())
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  createdBy   String
  user        User            @relation(fields: [createdBy], references: [id])
}
