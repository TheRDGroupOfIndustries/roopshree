generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EXCLUSIVE_USER
  DELIVERY_BOY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  CONFIRMED
  DISPATCH
  OUTOFDELIVERY
  CANCELLED
  DELIVERED
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews  Review[]
  products Products[] @relation("UserProducts")

  cart                Cart?
  employees           Employee[]
  ordersAsUser        Order[]        @relation("OrderUser") // orders where user is the customer
  ordersAsDeliveryBoy Order[]        @relation("OrderDeliveryBoy") // orders assigned as delivery boy
  wishlist            Wishlist[]
  stockHistory        StockHistory[]
}

model Employee {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  hireDate    DateTime  @default(now())
  position    String
  salary      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  details     String?
  insideBox   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation("UserProducts", fields: [userId], references: [id])

  reviews  Review[]
  cart     CartItem[]
  orders   Order[]
  wishlist Wishlist[]
  stock    Stock?
}

model Cart {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  items CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  quantity  Int      @default(1)
  color     String?
  size      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cartId    String
  productId String

  cart    Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id            String   @id @default(cuid())
  productId     String
  userId        String
  quantity      Int
  totalAmount   Float
  status        Status   @default(CONFIRMED)
  address       String
  paymentMode   String   @default("COD")
  referralCode  String?
  createdAt     DateTime @default(now())
  deliveryBoyId String?

  // Relations
  product     Products? @relation(fields: [productId], references: [id])
  user        User?     @relation(name: "OrderUser", fields: [userId], references: [id], onDelete: Cascade)
  deliveryBoy User?     @relation(name: "OrderDeliveryBoy", fields: [deliveryBoyId], references: [id])

  orderOtp OrderOtp?
}

model Stock {
  id           String @id @default(cuid())
  productId    String @unique
  currentStock Int    @default(0)

  product Products       @relation(fields: [productId], references: [id], onDelete: Cascade)
  history StockHistory[]
}

model StockHistory {
  id           String   @id @default(cuid())
  fromQuantity Int
  toQuantity   Int
  createdAt    DateTime @default(now())

  updatedBy String?
  user      User?   @relation(fields: [updatedBy], references: [id], onDelete: SetNull)

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  product Products @relation(fields: [productId], references: [id])

  @@unique([userId, productId]) // Prevent duplicates
}

model OrderOtp {
  id        String   @id @default(cuid())
  orderId   String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  createdBy String // delivery boy ID

  order Order @relation(fields: [orderId], references: [id])
}
