// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  EXCLUSIVE_USER
  DELIVERY_BOY
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  CONFIRMED
  DISPATCH
  OUTOFDELIVERY
  CANCELLED
}


model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  reviews   Review[]
  products  Products[] @relation("UserProducts")
  employees Employee[]
  orders    Order[]
}

model Employee {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  email       String    @unique
  phone       String?
  dateOfBirth DateTime?
  gender      Gender?
  hireDate    DateTime  @default(now())
  position    String
  salary      Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Products {
  id          String   @id @default(cuid())
  title       String
  description String
  images      String[]
  details     String?
  insideBox   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  reviews     Review[]
  orders      Order[]
  userId      String
  user        User     @relation("UserProducts", fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id           String   @id @default(cuid())
  productId    String
  userId       String
  quantity     Int
  totalAmount  Float
  status       Status @default(CONFIRMED)
  address      String
  paymentMode  String   @default("COD")
  referralCode String?
  createdAt    DateTime @default(now())

  product Products? @relation(fields: [productId], references: [id])
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
